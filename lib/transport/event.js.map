{"version":3,"file":"event.js","sources":["../../src/transport/event.ts"],"sourcesContent":["/* eslint-env browser */\n\nimport { ReactiveValue } from '../classes/ReactiveValue.js';\nimport { EndpointList } from '../classes/EndpointList.js';\nimport { EndpointListSet } from '../classes/EndpointListSet.js';\nimport * as utils from '../utils/index.js';\nimport { globalThis, AnyFn, UnsubscribeFn } from '../utils/index.js';\nimport {\n    GetRemoteUIInternalHandler,\n    EventTransportHandshakePayload,\n    EventTransportMessagePayload,\n    EventTransportConnectTo,\n    EventTransportEndpoint,\n    EventTransportChannelId,\n} from '../types.js';\nimport { EventTransportMessage } from '../types.js';\nimport { Publisher } from '../classes/Publisher.js';\nimport { Subscriber } from '../classes/Subscriber.js';\n\nconst DEBUG = false;\nconst DEBUG_PREFIX = '[rempl][event-transport] ';\n\nexport type TransportEndpoint = (Publisher | Subscriber | { id?: string }) & {\n    getRemoteUI?: GetRemoteUIInternalHandler;\n};\n\nexport type OnInitCallbackArg = {\n    connected: ReactiveValue<boolean>;\n    subscribe(fn: AnyFn): UnsubscribeFn;\n    getRemoteUI(callback?: AnyFn): void;\n    send(...args: unknown[]): void;\n};\n\nexport type OnInitCallback = (arg: OnInitCallbackArg) => void;\nexport type OnInitFnArgs = [endpoint: TransportEndpoint, callback: OnInitCallback];\n\nexport type Connection = {\n    ttl: number;\n    endpoints: EndpointList;\n};\n\nexport type CallbackPayload<TArgs extends unknown[]> = {\n    type: 'callback';\n    callback(...args: TArgs): void;\n    data: TArgs;\n};\n\nconst allTransports: EventTransport[] = [];\n\nexport class EventTransport {\n    static get(\n        name: EventTransportEndpoint,\n        connectTo: EventTransportEndpoint,\n        win?: Window | typeof globalThis\n    ): EventTransport {\n        if (!win) {\n            win = globalThis;\n        }\n\n        const transport = allTransports.find(\n            (transport) =>\n                transport.name === name &&\n                transport.connectTo === connectTo &&\n                transport.realm === win\n        );\n\n        return transport || new EventTransport(name, connectTo, win);\n    }\n\n    name: EventTransportEndpoint;\n    connectTo: EventTransportEndpoint;\n    realm: Window | typeof globalThis;\n    inputChannelId: EventTransportChannelId;\n    connections = new Map<EventTransportChannelId, Connection>();\n    connected = new ReactiveValue(false);\n    endpointGetUI = new Map<string, GetRemoteUIInternalHandler>();\n    ownEndpoints = new EndpointList();\n    remoteEndpoints = new EndpointListSet();\n\n    initCallbacks: OnInitFnArgs[] = [];\n    dataCallbacks: Array<{ endpoint: string; fn: AnyFn }> = [];\n    sendCallbacks = new Map<string, AnyFn>();\n    inited = false;\n\n    constructor(\n        name: EventTransportEndpoint,\n        connectTo: EventTransportEndpoint,\n        win?: Window | typeof globalThis\n    ) {\n        if (allTransports.length === 0 && typeof addEventListener === 'function') {\n            addEventListener(\n                'message',\n                (e: MessageEvent) => {\n                    for (const transport of allTransports) {\n                        transport._onMessage(e);\n                    }\n                },\n                false\n            );\n        }\n\n        allTransports.push(this);\n\n        this.name = name;\n        this.connectTo = connectTo;\n        this.inputChannelId = `${name}/${utils.genUID()}`;\n        this.realm = win || globalThis;\n\n        this.ownEndpoints.on((endpoints) => {\n            if (this.connected.value) {\n                this.send({\n                    type: 'endpoints',\n                    data: [endpoints],\n                });\n            }\n        });\n\n        if (\n            typeof this.realm.postMessage !== 'function' ||\n            typeof addEventListener !== 'function'\n        ) {\n            console.warn(DEBUG_PREFIX + \"Event (postMessage) transport isn't supported\");\n            return;\n        }\n\n        this._handshake(false);\n    }\n\n    _handshake(inited: boolean) {\n        this._send(`${this.connectTo}:connect`, {\n            type: 'handshake',\n            initiator: this.name,\n            inited,\n            endpoints: this.ownEndpoints.value,\n        });\n    }\n\n    _onMessage(event: MessageEvent<EventTransportMessage>) {\n        if (event.source !== this.realm || event.target !== globalThis) {\n            return;\n        }\n\n        const data = event.data || {};\n        const connectTo: EventTransportConnectTo = `${this.name}:connect`;\n\n        switch (data.to) {\n            case connectTo:\n                if (data.payload?.initiator === this.connectTo) {\n                    this._onConnect(data.from, data.payload);\n                }\n                break;\n\n            case this.inputChannelId:\n                if (this.connections.has(data.from)) {\n                    this._onData(data.from, data.payload);\n                } else {\n                    console.warn(DEBUG_PREFIX + 'unknown incoming connection', data.from);\n                }\n                break;\n        }\n    }\n\n    _onConnect(from: EventTransportChannelId, payload: EventTransportHandshakePayload) {\n        if (!payload.inited) {\n            this._handshake(true);\n        }\n\n        if (!this.connections.has(from)) {\n            const endpoints = new EndpointList(payload.endpoints);\n\n            this.remoteEndpoints.add(endpoints);\n            this.connections.set(from, {\n                ttl: Date.now(),\n                endpoints,\n            });\n            this._send(from, {\n                type: 'connect',\n                endpoints: this.ownEndpoints.value,\n            });\n        }\n\n        this.inited = true;\n    }\n\n    _onData(from: EventTransportChannelId, payload: EventTransportMessagePayload) {\n        if (DEBUG) {\n            console.log(DEBUG_PREFIX + 'receive from ' + this.connectTo, payload.type, payload);\n        }\n\n        switch (payload.type) {\n            case 'connect': {\n                this.connections.get(from)?.endpoints.set(payload.endpoints);\n                this.connected.set(true);\n                this.initCallbacks.splice(0).forEach((args) => this.onInit(...args));\n                break;\n            }\n\n            case 'endpoints': {\n                this.connections.get(from)?.endpoints.set(payload.data[0]);\n                break;\n            }\n\n            case 'disconnect': {\n                this.connections.get(from)?.endpoints.set([]);\n                this.connected.set(false);\n                break;\n            }\n\n            case 'callback': {\n                if (payload.callback) {\n                    const callback = this.sendCallbacks.get(payload.callback);\n\n                    if (typeof callback === 'function') {\n                        callback(...payload.data);\n                        this.sendCallbacks.delete(payload.callback);\n                    }\n                }\n                break;\n            }\n\n            case 'data': {\n                let args = payload.data;\n                const callback = payload.callback;\n\n                if (callback) {\n                    args = args.concat(this._wrapCallback(from, callback));\n                }\n\n                for (const { endpoint, fn } of this.dataCallbacks) {\n                    if (endpoint === payload.endpoint) {\n                        fn(...args);\n                    }\n                }\n                break;\n            }\n            case 'getRemoteUI': {\n                if (!payload.endpoint) {\n                    return;\n                }\n\n                const getUI = this.endpointGetUI.get(payload.endpoint);\n\n                if (typeof getUI !== 'function') {\n                    console.warn(\n                        DEBUG_PREFIX +\n                            'receive unknown endpoint for getRemoteUI(): ' +\n                            payload.endpoint\n                    );\n\n                    if (payload.callback) {\n                        this._wrapCallback(\n                            from,\n                            payload.callback\n                        )('Wrong endpoint â€“ ' + payload.endpoint);\n                    }\n                } else {\n                    if (payload.callback) {\n                        const callback = this._wrapCallback(from, payload.callback);\n\n                        getUI(payload.data[0] || {})\n                            .catch((error) => ({ error: String(error?.message) }))\n                            .then((res) => {\n                                if ('error' in res) {\n                                    callback(res.error);\n                                } else {\n                                    callback(null, res.type, res.value);\n                                }\n                            });\n                    }\n                }\n                break;\n            }\n\n            default:\n                console.warn(\n                    DEBUG_PREFIX +\n                        'Unknown message type `' +\n                        // @ts-ignore\n                        payload.type +\n                        '` for `' +\n                        this.name +\n                        '`',\n                    payload\n                );\n        }\n    }\n\n    _wrapCallback(to: EventTransportChannelId, callback: string) {\n        return (...args: unknown[]) =>\n            this._send(to, {\n                type: 'callback',\n                callback,\n                data: args,\n            });\n    }\n\n    _send(to: EventTransportConnectTo, payload: EventTransportHandshakePayload): void;\n    _send(to: EventTransportChannelId, payload: EventTransportMessagePayload): void;\n    _send(to: EventTransportConnectTo | EventTransportChannelId, payload: any): void {\n        if (DEBUG) {\n            console.log(DEBUG_PREFIX + 'emit event', to, payload);\n        }\n\n        if (typeof this.realm.postMessage === 'function') {\n            const message: EventTransportMessage = {\n                from: this.inputChannelId,\n                to,\n                payload,\n            };\n\n            this.realm.postMessage(message, '*');\n        }\n    }\n\n    subscribeToEndpoint(endpoint: string | null, fn: AnyFn) {\n        return utils.subscribe(this.dataCallbacks, {\n            endpoint,\n            fn,\n        });\n    }\n\n    sendToEndpoint<\n        M extends Extract<EventTransportMessagePayload, { endpoint: string | null }>,\n        K extends M['type']\n    >(endpoint: string | null, type: K, ...args: any) {\n        let callback: string | null = null;\n\n        if (args.length && typeof args[args.length - 1] === 'function') {\n            callback = utils.genUID();\n            this.sendCallbacks.set(callback, args.pop() as AnyFn);\n        }\n\n        this.send({\n            type,\n            endpoint,\n            data: args,\n            callback,\n        });\n    }\n\n    send(payload: EventTransportMessagePayload) {\n        for (const channelId of this.connections.keys()) {\n            this._send(channelId, payload);\n        }\n    }\n\n    onInit(endpoint: TransportEndpoint, callback: OnInitCallback) {\n        const id = endpoint.id || null;\n\n        if (id) {\n            this.ownEndpoints.set(this.ownEndpoints.value.concat(id));\n\n            if (typeof endpoint.getRemoteUI === 'function') {\n                this.endpointGetUI.set(id, endpoint.getRemoteUI);\n            }\n        }\n\n        if (this.inited) {\n            callback({\n                connected: this.connected,\n                subscribe: this.subscribeToEndpoint.bind(this, id),\n                getRemoteUI: this.sendToEndpoint.bind(this, id, 'getRemoteUI'),\n                send: this.sendToEndpoint.bind(this, id, 'data'),\n            });\n        } else {\n            this.initCallbacks.push([endpoint, callback]);\n        }\n\n        return this;\n    }\n\n    sync(endpoint: Publisher | Subscriber) {\n        const channel = utils.genUID(8) + ':' + this.connectTo;\n\n        this.onInit(endpoint, (api) => {\n            api.subscribe(endpoint.processInput.bind(endpoint));\n            api.connected.link((connected) => {\n                endpoint.setupChannel(channel, api.send, this.remoteEndpoints, connected);\n            });\n        });\n\n        return this;\n    }\n}\n"],"names":["globalThis","utils.genUID","utils.subscribe"],"mappings":"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"}