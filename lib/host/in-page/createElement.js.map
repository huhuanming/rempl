{"version":3,"file":"createElement.js","sources":["../../../src/host/in-page/createElement.ts"],"sourcesContent":["/* eslint-env browser */\ntype Options<TRef extends string> = {\n    tagName?: string;\n    ref?: TRef;\n    style?: Record<string, string>;\n    events?: Record<string, () => void>;\n    children?: Array<string | Options<TRef>>;\n} & {\n    [key: string]: any;\n};\n\nexport default function <TRef extends string>(config: Options<TRef>) {\n    function createElement(options: Options<TRef>) {\n        const element = document.createElement(options.tagName || 'div');\n\n        for (const [name, value] of Object.entries(options)) {\n            switch (name) {\n                case 'tagName':\n                    break;\n\n                case 'ref':\n                    if (typeof value === 'string') {\n                        map[value] = element;\n                    }\n                    break;\n\n                case 'style':\n                    element.setAttribute(\n                        'style',\n                        Object.entries(value)\n                            .map(([property, value]) => property + ':' + value)\n                            .join(';')\n                    );\n                    break;\n\n                case 'events':\n                    for (const event in options.events) {\n                        element.addEventListener(event, options.events[event], false);\n                    }\n                    break;\n\n                case 'children':\n                    options.children?.forEach(function (child) {\n                        element.appendChild(\n                            typeof child === 'string'\n                                ? document.createTextNode(child)\n                                : createElement(child)\n                        );\n                    });\n                    break;\n\n                default:\n                    element.setAttribute(name, value);\n            }\n        }\n\n        return element;\n    }\n\n    const map: Record<string, HTMLElement> = {};\n    map.element = createElement(config);\n    return map as { [key in TRef | 'element']: HTMLElement };\n}\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAA,EAAA,MAAA,EAAA;AACA,IAAA,SAAA,aAAA,CAAA,OAAA,EAAA;AACA,QAAA,MAAA,OAAA,GAAA,QAAA,CAAA,aAAA,CAAA,OAAA,CAAA,OAAA,IAAA,KAAA,CAAA,CAAA;AACA;AACA,QAAA,KAAA,MAAA,CAAA,IAAA,EAAA,KAAA,CAAA,IAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,EAAA;AACA,YAAA,QAAA,IAAA;AACA,gBAAA,KAAA,SAAA;AACA,oBAAA,MAAA;AACA;AACA,gBAAA,KAAA,KAAA;AACA,oBAAA,IAAA,OAAA,KAAA,KAAA,QAAA,EAAA;AACA,wBAAA,GAAA,CAAA,KAAA,CAAA,GAAA,OAAA,CAAA;AACA,qBAAA;AACA,oBAAA,MAAA;AACA;AACA,gBAAA,KAAA,OAAA;AACA,oBAAA,OAAA,CAAA,YAAA;AACA,wBAAA,OAAA;AACA,wBAAA,MAAA,CAAA,OAAA,CAAA,KAAA,CAAA;AACA,6BAAA,GAAA,CAAA,CAAA,CAAA,QAAA,EAAA,KAAA,CAAA,KAAA,QAAA,GAAA,GAAA,GAAA,KAAA,CAAA;AACA,6BAAA,IAAA,CAAA,GAAA,CAAA;AACA,qBAAA,CAAA;AACA,oBAAA,MAAA;AACA;AACA,gBAAA,KAAA,QAAA;AACA,oBAAA,KAAA,MAAA,KAAA,IAAA,OAAA,CAAA,MAAA,EAAA;AACA,wBAAA,OAAA,CAAA,gBAAA,CAAA,KAAA,EAAA,OAAA,CAAA,MAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,CAAA;AACA,qBAAA;AACA,oBAAA,MAAA;AACA;AACA,gBAAA,KAAA,UAAA;AACA,oBAAA,OAAA,CAAA,QAAA,EAAA,OAAA,CAAA,UAAA,KAAA,EAAA;AACA,wBAAA,OAAA,CAAA,WAAA;AACA,4BAAA,OAAA,KAAA,KAAA,QAAA;AACA,kCAAA,QAAA,CAAA,cAAA,CAAA,KAAA,CAAA;AACA,kCAAA,aAAA,CAAA,KAAA,CAAA;AACA,yBAAA,CAAA;AACA,qBAAA,CAAA,CAAA;AACA,oBAAA,MAAA;AACA;AACA,gBAAA;AACA,oBAAA,OAAA,CAAA,YAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;AACA,aAAA;AACA,SAAA;AACA;AACA,QAAA,OAAA,OAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,MAAA,GAAA,GAAA,EAAA,CAAA;AACA,IAAA,GAAA,CAAA,OAAA,GAAA,aAAA,CAAA,MAAA,CAAA,CAAA;AACA,IAAA,OAAA,GAAA,EAAA;AACA;;;;"}