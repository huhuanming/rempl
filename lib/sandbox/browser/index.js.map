{"version":3,"file":"index.js","sources":["../../../src/sandbox/browser/index.ts"],"sourcesContent":["/* eslint-env browser */\nimport { Sandbox } from '../../types.js';\nimport { OnInitCallback, EventTransport } from '../../transport/event.js';\nimport { globalThis, trustedEmptyHTML, parent, genUID } from '../../utils/index.js';\nimport { initSandboxScript } from './sandbox-init.js';\n\ntype Global = typeof globalThis;\ntype SandboxWindow = Window | Global;\ntype Settings =\n    | {\n          type: 'script';\n          content: Record<string, string>;\n          sandboxSrc?: string;\n          window?: Window;\n          container?: HTMLElement;\n      }\n    | {\n          type: 'url';\n          content: string;\n          window?: Window;\n          container?: HTMLElement;\n      };\n\nconst initEnvSubscriberMessage = new WeakMap();\n\n// TODO: make tree-shaking friendly\nif (parent !== globalThis) {\n    addEventListener(\n        'message',\n        function (event: MessageEvent<any>) {\n            const data = event.data || {};\n\n            if (event.source && data.to === 'rempl-env-publisher:connect') {\n                initEnvSubscriberMessage.set(event.source, data);\n            }\n        },\n        true\n    );\n}\n\nexport function createSandbox(settings: Settings, callback: OnInitCallback) {\n    function initSandbox(sandboxWindow: SandboxWindow) {\n        if (settings.type === 'script') {\n            sandboxWindow.postMessage(\n                {\n                    action: 'rempl-sandbox-init-scripts',\n                    scripts: settings.content,\n                },\n                '*'\n            );\n        }\n\n        if (parent !== globalThis && sandboxWindow !== globalThis) {\n            let toSandbox = NaN;\n            let toEnv = NaN;\n\n            if (onEnvMessage) {\n                removeEventListener('message', onEnvMessage, true);\n                onEnvMessage = null;\n            }\n\n            addEventListener(\n                'message',\n                (onEnvMessage = function (event: MessageEvent<any>) {\n                    const data = event.data || {};\n\n                    switch (data.to) {\n                        case 'rempl-env-subscriber:connect':\n                        case toSandbox:\n                            toEnv = data.from;\n                            sandboxWindow.postMessage(data, '*');\n                            break;\n\n                        case 'rempl-env-publisher:connect':\n                        case toEnv:\n                            toSandbox = data.from;\n                            parent.postMessage(data);\n                            break;\n                    }\n                }),\n                true\n            );\n\n            if (settings.type !== 'script') {\n                const initMessage = initEnvSubscriberMessage.get(sandboxWindow);\n\n                if (initMessage) {\n                    toSandbox = initMessage.from;\n                    parent.postMessage(initMessage);\n                }\n            }\n        }\n\n        // sandbox <-> subscriber transport\n        // TODO: teardown transport\n        transport = EventTransport.get('rempl-sandbox', 'rempl-subscriber', sandboxWindow).onInit(\n            {},\n            (api) => callback(api)\n        );\n\n        if (connected) {\n            transport.ownEndpoints.set(['*']);\n        }\n    }\n\n    let iframe: HTMLIFrameElement | null = null;\n    let onEnvMessage: ((event: MessageEvent<any>) => void) | null = null;\n    let transport: EventTransport | null = null;\n    let connected = false;\n\n    settings = settings || {};\n\n    if (settings.window) {\n        initSandbox(settings.window);\n    } else {\n        iframe = document.createElement('iframe');\n        iframe.name = genUID(); // to avoid cache\n        iframe.onload = () => iframe?.contentWindow && initSandbox(iframe.contentWindow);\n        iframe.setAttribute('sandbox', 'allow-scripts allow-forms allow-popups allow-modals');\n\n        if (settings.type === 'url') {\n            iframe.src = settings.content;\n        } else if (settings.sandboxSrc) {\n            iframe.src = settings.sandboxSrc;\n        } else {\n            iframe.srcdoc = '<!doctype html><script>(' + String(initSandboxScript) + ')()</script>';\n            // iframe.src = URL.createObjectURL(\n            //     new Blob(\n            //         ['<!doctype html><script>(' + String(initSandboxScript) + ')()</script>'],\n            //         { type: 'text/html' }\n            //     )\n            // );\n        }\n\n        (settings.container || document.documentElement).appendChild(iframe);\n    }\n\n    const sandbox: Sandbox = {\n        setConnected(state) {\n            connected = state;\n\n            if (transport) {\n                transport.ownEndpoints.set(connected ? ['*'] : []);\n            }\n        },\n        destroy() {\n            if (onEnvMessage) {\n                removeEventListener('message', onEnvMessage, true);\n                onEnvMessage = null;\n            }\n\n            if (transport) {\n                transport.ownEndpoints.set([]);\n            }\n\n            if (iframe !== null) {\n                iframe.remove();\n                iframe.setAttribute('srcdoc', trustedEmptyHTML);\n                iframe.setAttribute('src', trustedEmptyHTML);\n                iframe = null;\n            }\n        },\n    };\n\n    return sandbox;\n}\n"],"names":["parent","globalThis"],"mappings":"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"}