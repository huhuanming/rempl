{"version":3,"file":"Subscriber.js","sources":["../../src/classes/Subscriber.ts"],"sourcesContent":["import { DataMessage } from '../types.js';\nimport { AnyFn, subscribe } from '../utils/index.js';\nimport { Namespace } from './Namespace.js';\nimport { Packet, Endpoint } from './Endpoint.js';\n\nexport type SubscriberPacket = DataMessage | Packet;\n\nconst subscribers = new Map<SubscriberNamespace, AnyFn[]>();\n\nexport class SubscriberNamespace extends Namespace {\n    constructor(name: string, endpoint: Endpoint<SubscriberNamespace>) {\n        super(name, endpoint);\n        subscribers.set(this, []);\n    }\n\n    subscribe(fn: AnyFn) {\n        this.callRemote('init').then(fn);\n\n        return subscribe(subscribers.get(this) || [], fn);\n    }\n}\n\nexport class Subscriber extends Endpoint<SubscriberNamespace> {\n    type = 'Subscriber';\n    get namespaceClass() {\n        return SubscriberNamespace;\n    }\n\n    constructor(id?: string) {\n        super(id);\n\n        this.connected.on((connected) => {\n            if (connected) {\n                this.requestRemoteApi();\n\n                for (const name in this.namespaces) {\n                    const ns = this.namespaces[name];\n                    const nsSubscribers = subscribers.get(ns) || [];\n\n                    if (nsSubscribers.length) {\n                        ns.callRemote('init').then((data: unknown) => {\n                            for (const callback of nsSubscribers) {\n                                callback(data);\n                            }\n                        });\n                    }\n                }\n            } else {\n                this.setRemoteApi();\n            }\n        });\n    }\n\n    processInput(packet: SubscriberPacket, callback: AnyFn) {\n        switch (packet.type) {\n            case 'data': {\n                const { ns, payload } = packet;\n                const nsSubscribers = subscribers.get(this.ns(ns || '*'));\n\n                if (nsSubscribers) {\n                    nsSubscribers.slice().forEach((callback) => callback(payload));\n                }\n                break;\n            }\n\n            default:\n                super.processInput(packet as Packet, callback); // FIXME!!!\n        }\n    }\n}\n"],"names":[],"mappings":";;;;AAOA,MAAA,WAAA,GAAA,IAAA,GAAA,EAAA,CAAA;AACA;AACA,MAAA,mBAAA,SAAA,SAAA,CAAA;AACA,IAAA,WAAA,CAAA,IAAA,EAAA,QAAA,EAAA;AACA,QAAA,KAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AACA,QAAA,WAAA,CAAA,GAAA,CAAA,IAAA,EAAA,EAAA,CAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,SAAA,CAAA,EAAA,EAAA;AACA,QAAA,IAAA,CAAA,UAAA,CAAA,MAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA;AACA;AACA,QAAA,OAAA,SAAA,CAAA,WAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,CAAA,CAAA;AACA,KAAA;AACA,CAAA;AACA;AACA,MAAA,UAAA,SAAA,QAAA,CAAA;AACA,IAAA,IAAA,GAAA,YAAA,CAAA;AACA,IAAA,IAAA,cAAA,GAAA;AACA,QAAA,OAAA,mBAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,WAAA,CAAA,EAAA,EAAA;AACA,QAAA,KAAA,CAAA,EAAA,CAAA,CAAA;AACA;AACA,QAAA,IAAA,CAAA,SAAA,CAAA,EAAA,CAAA,CAAA,SAAA,KAAA;AACA,YAAA,IAAA,SAAA,EAAA;AACA,gBAAA,IAAA,CAAA,gBAAA,EAAA,CAAA;AACA;AACA,gBAAA,KAAA,MAAA,IAAA,IAAA,IAAA,CAAA,UAAA,EAAA;AACA,oBAAA,MAAA,EAAA,GAAA,IAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAAA;AACA,oBAAA,MAAA,aAAA,GAAA,WAAA,CAAA,GAAA,CAAA,EAAA,CAAA,IAAA,EAAA,CAAA;AACA;AACA,oBAAA,IAAA,aAAA,CAAA,MAAA,EAAA;AACA,wBAAA,EAAA,CAAA,UAAA,CAAA,MAAA,CAAA,CAAA,IAAA,CAAA,CAAA,IAAA,KAAA;AACA,4BAAA,KAAA,MAAA,QAAA,IAAA,aAAA,EAAA;AACA,gCAAA,QAAA,CAAA,IAAA,CAAA,CAAA;AACA,6BAAA;AACA,yBAAA,CAAA,CAAA;AACA,qBAAA;AACA,iBAAA;AACA,aAAA,MAAA;AACA,gBAAA,IAAA,CAAA,YAAA,EAAA,CAAA;AACA,aAAA;AACA,SAAA,CAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,YAAA,CAAA,MAAA,EAAA,QAAA,EAAA;AACA,QAAA,QAAA,MAAA,CAAA,IAAA;AACA,YAAA,KAAA,MAAA,EAAA;AACA,gBAAA,MAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GAAA,MAAA,CAAA;AACA,gBAAA,MAAA,aAAA,GAAA,WAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA,CAAA,EAAA,IAAA,GAAA,CAAA,CAAA,CAAA;AACA;AACA,gBAAA,IAAA,aAAA,EAAA;AACA,oBAAA,aAAA,CAAA,KAAA,EAAA,CAAA,OAAA,CAAA,CAAA,QAAA,KAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA;AACA,iBAAA;AACA,gBAAA,MAAA;AACA,aAAA;AACA;AACA,YAAA;AACA,gBAAA,KAAA,CAAA,YAAA,CAAA,MAAA,GAAA,QAAA,CAAA,CAAA;AACA,SAAA;AACA,KAAA;AACA;;;;"}