{"version":3,"file":"Namespace.js","sources":["../../src/classes/Namespace.ts"],"sourcesContent":["import { CallMessage } from '../types.js';\nimport { AnyFn } from '../utils/index.js';\nimport { Endpoint } from './Endpoint.js';\n\nexport type Method<T extends unknown[]> = (...args: T) => unknown;\nexport type NamespaceMethods = Record<string, Method<unknown[]>>;\nexport type Wrapper = ((...args: unknown[]) => Promise<unknown>) & { available: boolean };\nexport type ListenerCallback = (methods: string[]) => void;\nexport type Listener = {\n    event: string;\n    callback: ListenerCallback;\n    listeners: Listener | null;\n};\n\nexport class Namespace {\n    name: string;\n    owner: Endpoint<Namespace>;\n    methods: NamespaceMethods = Object.create(null);\n    remoteMethodWrappers: Record<string, Wrapper> = Object.create(null);\n    remoteMethods: string[] = [];\n    listeners: Listener | null = null;\n\n    constructor(name: string, owner: Endpoint<Namespace>) {\n        this.name = name;\n        this.owner = owner;\n        this.methods = Object.create(null);\n    }\n\n    isMethodProvided(methodName: string): boolean {\n        return methodName in this.methods;\n    }\n\n    provide<TReturn extends unknown[]>(\n        methodName: string | NamespaceMethods,\n        fn?: Method<TReturn>\n    ): void {\n        if (typeof methodName === 'string') {\n            if (typeof fn === 'function') {\n                this.methods[methodName] = fn as Method<unknown[]>;\n                this.owner.scheduleProvidedMethodsUpdate();\n            }\n        } else {\n            const methods = methodName;\n\n            for (const [methodName, fn] of Object.entries(methods)) {\n                if (typeof fn === 'function') {\n                    this.methods[methodName] = fn;\n                    this.owner.scheduleProvidedMethodsUpdate();\n                }\n            }\n        }\n    }\n\n    revoke(methodName: string | string[]): void {\n        if (Array.isArray(methodName)) {\n            methodName.forEach(this.revoke, this);\n        } else {\n            if (this.isMethodProvided(methodName)) {\n                delete this.methods[methodName];\n                this.owner.scheduleProvidedMethodsUpdate();\n            }\n        }\n    }\n\n    isRemoteMethodExists(methodName: string): boolean {\n        return this.remoteMethods.includes(methodName);\n    }\n\n    callRemote(method: string, ...args: unknown[]): Promise<unknown> {\n        let callback: AnyFn | null = null;\n\n        if (args.length && typeof args[args.length - 1] === 'function') {\n            callback = args.pop() as AnyFn;\n            console.warn(\n                '[rempl] Using a callback for Namespace#callMethod() is deprecated, use returned promise value instead'\n            );\n        }\n\n        return new Promise((resolve) => {\n            const callPacket: CallMessage = {\n                type: 'call',\n                ns: this.name,\n                method,\n                args,\n            };\n\n            this.owner.send(callPacket, (...args: unknown[]) => {\n                resolve(args[0]);\n                callback?.(...args);\n            });\n        });\n    }\n\n    getRemoteMethod(methodName: string): Wrapper {\n        let methodWrapper = this.remoteMethodWrappers[methodName];\n\n        if (typeof methodWrapper !== 'function') {\n            methodWrapper = this.remoteMethodWrappers[methodName] = Object.assign(\n                (...args: unknown[]) => {\n                    if (methodWrapper.available) {\n                        return this.callRemote(methodName, ...args);\n                    }\n\n                    return Promise.reject(\n                        new Error(\n                            `[rempl] ${this.owner.getName()} ns(\"${\n                                this.name\n                            }\") has no available remote method \"${methodName}`\n                        )\n                    );\n                },\n                {\n                    available: this.remoteMethods.indexOf(methodName) !== -1,\n                }\n            );\n        }\n\n        return methodWrapper;\n    }\n\n    onRemoteMethodsChanged(callback: ListenerCallback): AnyFn {\n        const listener: Listener = {\n            event: 'remoteMethodsChanged',\n            callback,\n            listeners: this.listeners,\n        };\n\n        this.listeners = listener;\n\n        callback([...this.remoteMethods]);\n\n        return () => {\n            let cursor = this.listeners;\n            let prev: { listeners: Listener | null } = this;\n\n            while (cursor !== null) {\n                if (cursor === listener) {\n                    prev.listeners = cursor.listeners;\n                    break;\n                }\n\n                prev = cursor;\n                cursor = cursor.listeners;\n            }\n        };\n    }\n\n    static invoke(namespace: Namespace, method: string, args: unknown[], callback: AnyFn): void {\n        // add a callback to args even if no callback, to avoid extra checking\n        // that callback is passed by remote side\n        let callbackCalled = false;\n        args = args.concat((...args: unknown[]) => {\n            callbackCalled = true;\n            callback(...args);\n            console.warn(\n                '[rempl] Using a callback in provided methods has been deprecated, just return a value or promise instead'\n            );\n        });\n\n        // invoke the provided remote method\n        Promise.resolve(namespace.methods[method].apply(null, args)).then((value) => {\n            if (!callbackCalled) {\n                callback(value);\n            }\n        });\n    }\n\n    static notifyRemoteMethodsChanged(namespace: Namespace): void {\n        let cursor = namespace.listeners;\n\n        for (const method in namespace.remoteMethodWrappers) {\n            namespace.remoteMethodWrappers[method].available =\n                namespace.remoteMethods.includes(method);\n        }\n\n        while (cursor !== null) {\n            if (cursor.event === 'remoteMethodsChanged') {\n                cursor.callback.call(null, [...namespace.remoteMethods]);\n            }\n\n            cursor = cursor.listeners;\n        }\n    }\n}\n"],"names":[],"mappings":"AAcA,MAAA,SAAA,CAAA;AACA,IAAA,IAAA,CAAA;AACA,IAAA,KAAA,CAAA;AACA,IAAA,OAAA,GAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACA,IAAA,oBAAA,GAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACA,IAAA,aAAA,GAAA,EAAA,CAAA;AACA,IAAA,SAAA,GAAA,IAAA,CAAA;AACA;AACA,IAAA,WAAA,CAAA,IAAA,EAAA,KAAA,EAAA;AACA,QAAA,IAAA,CAAA,IAAA,GAAA,IAAA,CAAA;AACA,QAAA,IAAA,CAAA,KAAA,GAAA,KAAA,CAAA;AACA,QAAA,IAAA,CAAA,OAAA,GAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,gBAAA,CAAA,UAAA,EAAA;AACA,QAAA,OAAA,UAAA,IAAA,IAAA,CAAA,OAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,OAAA;AACA,QAAA,UAAA;AACA,QAAA,EAAA;AACA,MAAA;AACA,QAAA,IAAA,OAAA,UAAA,KAAA,QAAA,EAAA;AACA,YAAA,IAAA,OAAA,EAAA,KAAA,UAAA,EAAA;AACA,gBAAA,IAAA,CAAA,OAAA,CAAA,UAAA,CAAA,GAAA,EAAA,EAAA;AACA,gBAAA,IAAA,CAAA,KAAA,CAAA,6BAAA,EAAA,CAAA;AACA,aAAA;AACA,SAAA,MAAA;AACA,YAAA,MAAA,OAAA,GAAA,UAAA,CAAA;AACA;AACA,YAAA,KAAA,MAAA,CAAA,UAAA,EAAA,EAAA,CAAA,IAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,EAAA;AACA,gBAAA,IAAA,OAAA,EAAA,KAAA,UAAA,EAAA;AACA,oBAAA,IAAA,CAAA,OAAA,CAAA,UAAA,CAAA,GAAA,EAAA,CAAA;AACA,oBAAA,IAAA,CAAA,KAAA,CAAA,6BAAA,EAAA,CAAA;AACA,iBAAA;AACA,aAAA;AACA,SAAA;AACA,KAAA;AACA;AACA,IAAA,MAAA,CAAA,UAAA,EAAA;AACA,QAAA,IAAA,KAAA,CAAA,OAAA,CAAA,UAAA,CAAA,EAAA;AACA,YAAA,UAAA,CAAA,OAAA,CAAA,IAAA,CAAA,MAAA,EAAA,IAAA,CAAA,CAAA;AACA,SAAA,MAAA;AACA,YAAA,IAAA,IAAA,CAAA,gBAAA,CAAA,UAAA,CAAA,EAAA;AACA,gBAAA,OAAA,IAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;AACA,gBAAA,IAAA,CAAA,KAAA,CAAA,6BAAA,EAAA,CAAA;AACA,aAAA;AACA,SAAA;AACA,KAAA;AACA;AACA,IAAA,oBAAA,CAAA,UAAA,EAAA;AACA,QAAA,OAAA,IAAA,CAAA,aAAA,CAAA,QAAA,CAAA,UAAA,CAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,UAAA,CAAA,MAAA,EAAA,GAAA,IAAA,EAAA;AACA,QAAA,IAAA,QAAA,GAAA,IAAA,CAAA;AACA;AACA,QAAA,IAAA,IAAA,CAAA,MAAA,IAAA,OAAA,IAAA,CAAA,IAAA,CAAA,MAAA,GAAA,CAAA,CAAA,KAAA,UAAA,EAAA;AACA,YAAA,QAAA,GAAA,IAAA,CAAA,GAAA,EAAA,EAAA;AACA,YAAA,OAAA,CAAA,IAAA;AACA,gBAAA,uGAAA;AACA,aAAA,CAAA;AACA,SAAA;AACA;AACA,QAAA,OAAA,IAAA,OAAA,CAAA,CAAA,OAAA,KAAA;AACA,YAAA,MAAA,UAAA,GAAA;AACA,gBAAA,IAAA,EAAA,MAAA;AACA,gBAAA,EAAA,EAAA,IAAA,CAAA,IAAA;AACA,gBAAA,MAAA;AACA,gBAAA,IAAA;AACA,aAAA,CAAA;AACA;AACA,YAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,EAAA,CAAA,GAAA,IAAA,KAAA;AACA,gBAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,gBAAA,QAAA,GAAA,GAAA,IAAA,CAAA,CAAA;AACA,aAAA,CAAA,CAAA;AACA,SAAA,CAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,eAAA,CAAA,UAAA,EAAA;AACA,QAAA,IAAA,aAAA,GAAA,IAAA,CAAA,oBAAA,CAAA,UAAA,CAAA,CAAA;AACA;AACA,QAAA,IAAA,OAAA,aAAA,KAAA,UAAA,EAAA;AACA,YAAA,aAAA,GAAA,IAAA,CAAA,oBAAA,CAAA,UAAA,CAAA,GAAA,MAAA,CAAA,MAAA;AACA,gBAAA,CAAA,GAAA,IAAA,KAAA;AACA,oBAAA,IAAA,aAAA,CAAA,SAAA,EAAA;AACA,wBAAA,OAAA,IAAA,CAAA,UAAA,CAAA,UAAA,EAAA,GAAA,IAAA,CAAA,CAAA;AACA,qBAAA;AACA;AACA,oBAAA,OAAA,OAAA,CAAA,MAAA;AACA,wBAAA,IAAA,KAAA;AACA,4BAAA,CAAA,QAAA,EAAA,IAAA,CAAA,KAAA,CAAA,OAAA,EAAA,CAAA,KAAA;AACA,gCAAA,IAAA,CAAA,IAAA;AACA,6BAAA,mCAAA,EAAA,UAAA,CAAA,CAAA;AACA,yBAAA;AACA,qBAAA,CAAA;AACA,iBAAA;AACA,gBAAA;AACA,oBAAA,SAAA,EAAA,IAAA,CAAA,aAAA,CAAA,OAAA,CAAA,UAAA,CAAA,KAAA,CAAA,CAAA;AACA,iBAAA;AACA,aAAA,CAAA;AACA,SAAA;AACA;AACA,QAAA,OAAA,aAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,sBAAA,CAAA,QAAA,EAAA;AACA,QAAA,MAAA,QAAA,GAAA;AACA,YAAA,KAAA,EAAA,sBAAA;AACA,YAAA,QAAA;AACA,YAAA,SAAA,EAAA,IAAA,CAAA,SAAA;AACA,SAAA,CAAA;AACA;AACA,QAAA,IAAA,CAAA,SAAA,GAAA,QAAA,CAAA;AACA;AACA,QAAA,QAAA,CAAA,CAAA,GAAA,IAAA,CAAA,aAAA,CAAA,CAAA,CAAA;AACA;AACA,QAAA,OAAA,MAAA;AACA,YAAA,IAAA,MAAA,GAAA,IAAA,CAAA,SAAA,CAAA;AACA,YAAA,IAAA,IAAA,GAAA,IAAA,CAAA;AACA;AACA,YAAA,OAAA,MAAA,KAAA,IAAA,EAAA;AACA,gBAAA,IAAA,MAAA,KAAA,QAAA,EAAA;AACA,oBAAA,IAAA,CAAA,SAAA,GAAA,MAAA,CAAA,SAAA,CAAA;AACA,oBAAA,MAAA;AACA,iBAAA;AACA;AACA,gBAAA,IAAA,GAAA,MAAA,CAAA;AACA,gBAAA,MAAA,GAAA,MAAA,CAAA,SAAA,CAAA;AACA,aAAA;AACA,SAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,OAAA,MAAA,CAAA,SAAA,EAAA,MAAA,EAAA,IAAA,EAAA,QAAA,EAAA;AACA;AACA;AACA,QAAA,IAAA,cAAA,GAAA,KAAA,CAAA;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,MAAA,CAAA,CAAA,GAAA,IAAA,KAAA;AACA,YAAA,cAAA,GAAA,IAAA,CAAA;AACA,YAAA,QAAA,CAAA,GAAA,IAAA,CAAA,CAAA;AACA,YAAA,OAAA,CAAA,IAAA;AACA,gBAAA,0GAAA;AACA,aAAA,CAAA;AACA,SAAA,CAAA,CAAA;AACA;AACA;AACA,QAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA,KAAA,CAAA,IAAA,EAAA,IAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,KAAA;AACA,YAAA,IAAA,CAAA,cAAA,EAAA;AACA,gBAAA,QAAA,CAAA,KAAA,CAAA,CAAA;AACA,aAAA;AACA,SAAA,CAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,OAAA,0BAAA,CAAA,SAAA,EAAA;AACA,QAAA,IAAA,MAAA,GAAA,SAAA,CAAA,SAAA,CAAA;AACA;AACA,QAAA,KAAA,MAAA,MAAA,IAAA,SAAA,CAAA,oBAAA,EAAA;AACA,YAAA,SAAA,CAAA,oBAAA,CAAA,MAAA,CAAA,CAAA,SAAA;AACA,gBAAA,SAAA,CAAA,aAAA,CAAA,QAAA,CAAA,MAAA,CAAA,CAAA;AACA,SAAA;AACA;AACA,QAAA,OAAA,MAAA,KAAA,IAAA,EAAA;AACA,YAAA,IAAA,MAAA,CAAA,KAAA,KAAA,sBAAA,EAAA;AACA,gBAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CAAA,GAAA,SAAA,CAAA,aAAA,CAAA,CAAA,CAAA;AACA,aAAA;AACA;AACA,YAAA,MAAA,GAAA,MAAA,CAAA,SAAA,CAAA;AACA,SAAA;AACA,KAAA;AACA;;;;"}