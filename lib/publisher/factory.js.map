{"version":3,"file":"factory.js","sources":["../../src/publisher/factory.ts"],"sourcesContent":["import { WsTransport } from '../transport/ws.js';\nimport { TransportPublisher } from './TransportPublisher.js';\nimport { GetRemoteUIHandler, PublisherOptions, PublisherWsSettings } from '../types.js';\n\nconst publishers = new Map<string, TransportPublisher>();\nlet ws: WsTransport | null = null;\n\nexport function getPublisher(\n    id: string,\n    getRemoteUI: GetRemoteUIHandler,\n    options?: PublisherOptions\n) {\n    let publisher = publishers.get(id);\n\n    if (publisher) {\n        console.warn(`[rempl] Publisher with ID \"${id}\" has been already created`);\n        return publisher;\n    }\n\n    publisher = new TransportPublisher(id, getRemoteUI, options);\n    publishers.set(id, publisher);\n\n    if (ws) {\n        ws.sync(publisher);\n    }\n\n    return publisher;\n}\n\nexport function resolveWsUri(\n    settings: { explicit: string | undefined; implicit: string },\n    uri?: string\n) {\n    switch (uri) {\n        case 'implicit':\n        case undefined:\n            return settings.explicit || settings.implicit;\n\n        case 'explicit':\n            return settings.explicit;\n    }\n\n    return uri;\n}\n\nexport function connect(\n    auto: boolean,\n    createWsTransport: (uri: string) => WsTransport,\n    fetchWsSettings: () => PublisherWsSettings,\n    uri?: string\n) {\n    if (ws === null) {\n        uri = auto ? fetchWsSettings().explicit : resolveWsUri(fetchWsSettings(), uri);\n\n        if (typeof uri === 'string') {\n            ws = createWsTransport(uri);\n\n            for (const publisher of publishers.values()) {\n                ws.sync(publisher);\n            }\n        } else if (!auto) {\n            console.warn(\n                \"[rempl] Connection to WS server doesn't established since bad value for URI\",\n                uri\n            );\n        }\n    } else {\n        console.warn('[rempl] Connection to WS server already set');\n    }\n}\n"],"names":[],"mappings":";;AAIA,MAAA,UAAA,GAAA,IAAA,GAAA,EAAA,CAAA;AACA,IAAA,EAAA,GAAA,IAAA,CAAA;AACA;AACA,SAAA,YAAA;AACA,IAAA,EAAA;AACA,IAAA,WAAA;AACA,IAAA,OAAA;AACA,EAAA;AACA,IAAA,IAAA,SAAA,GAAA,UAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA;AACA;AACA,IAAA,IAAA,SAAA,EAAA;AACA,QAAA,OAAA,CAAA,IAAA,CAAA,CAAA,2BAAA,EAAA,EAAA,CAAA,0BAAA,CAAA,CAAA,CAAA;AACA,QAAA,OAAA,SAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,SAAA,GAAA,IAAA,kBAAA,CAAA,EAAA,EAAA,WAAA,EAAA,OAAA,CAAA,CAAA;AACA,IAAA,UAAA,CAAA,GAAA,CAAA,EAAA,EAAA,SAAA,CAAA,CAAA;AACA;AACA,IAAA,IAAA,EAAA,EAAA;AACA,QAAA,EAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,OAAA,SAAA,CAAA;AACA,CAAA;AACA;AACA,SAAA,YAAA;AACA,IAAA,QAAA;AACA,IAAA,GAAA;AACA,EAAA;AACA,IAAA,QAAA,GAAA;AACA,QAAA,KAAA,UAAA,CAAA;AACA,QAAA,KAAA,SAAA;AACA,YAAA,OAAA,QAAA,CAAA,QAAA,IAAA,QAAA,CAAA,QAAA,CAAA;AACA;AACA,QAAA,KAAA,UAAA;AACA,YAAA,OAAA,QAAA,CAAA,QAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,OAAA,GAAA,CAAA;AACA,CAAA;AACA;AACA,SAAA,OAAA;AACA,IAAA,IAAA;AACA,IAAA,iBAAA;AACA,IAAA,eAAA;AACA,IAAA,GAAA;AACA,EAAA;AACA,IAAA,IAAA,EAAA,KAAA,IAAA,EAAA;AACA,QAAA,GAAA,GAAA,IAAA,GAAA,eAAA,EAAA,CAAA,QAAA,GAAA,YAAA,CAAA,eAAA,EAAA,EAAA,GAAA,CAAA,CAAA;AACA;AACA,QAAA,IAAA,OAAA,GAAA,KAAA,QAAA,EAAA;AACA,YAAA,EAAA,GAAA,iBAAA,CAAA,GAAA,CAAA,CAAA;AACA;AACA,YAAA,KAAA,MAAA,SAAA,IAAA,UAAA,CAAA,MAAA,EAAA,EAAA;AACA,gBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;AACA,aAAA;AACA,SAAA,MAAA,IAAA,CAAA,IAAA,EAAA;AACA,YAAA,OAAA,CAAA,IAAA;AACA,gBAAA,6EAAA;AACA,gBAAA,GAAA;AACA,aAAA,CAAA;AACA,SAAA;AACA,KAAA,MAAA;AACA,QAAA,OAAA,CAAA,IAAA,CAAA,6CAAA,CAAA,CAAA;AACA,KAAA;AACA;;;;"}